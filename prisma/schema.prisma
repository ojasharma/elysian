// This tells Prisma what database you're using.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This tells Prisma to generate the client code for TypeScript.
generator client {
  provider = "prisma-client-js"
}

// ✅ UPDATED USER MODEL
// Compatible with NextAuth.js adapter while keeping your custom fields.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? // Used by NextAuth adapter
  image         String?   // Used by NextAuth for profile pictures
  password      String?   // Your custom field for credentials login

  // Your custom fields for email verification with OTP
  otp           String?
  otpExpiry     DateTime?
  isVerified    Boolean   @default(false)

  // ✅ Relations required by NextAuth
  accounts      Account[]
  sessions      Session[]
}


// ✅ NEW MODELS REQUIRED BY NEXTAUTH.JS

// Manages social login accounts and links them to a User.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Manages user sessions in the database.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Used for magic link sign-in emails (good practice to include).
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}